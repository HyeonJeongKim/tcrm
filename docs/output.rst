.. _modeloutput:

Model output
============

TCRM generates a variety of output that can be used to analyse the
input dataset and the resulting hazard estimates. The five primary
modules (:mod:`DataProcess`, :mod:`StatInterface`,
:mod:`TrackGenerator`, :mod:`wind` and :mod:`hazard`) all generate
data files and figures that help interpret the results and assist in
ensuring the model is performing as expected.

.. _directorystructure:

Output directory structure
--------------------------

The output directory structure is::

  |-process
  |       |-timeseries
  |-hazard
  |-log
  |-tracks
  |-windfield
  |-plots
        |-stats
	|-hazard

* ``process``: contains a mixture of text and netcdf-format files
  generated by :mod:`DataProcess` and :mod:`StatInterface`.
* ``process/timeseries``: contains comma-separated time series data
  for locations, generated when running `tcevent.py` -- see the
  :ref:`scenariomodelling` section of the user guide.
* ``hazard``: contains the final netcdf-format file of return period
  wind speeds. The file also contains the location, shape and scale
  parameters for the Generalised Extreme Value (GEV) distribution
  fitted to the wind speeds at each point. If the ``CalculateCI``
  option in the ``Hazard`` section of the configuration file was set
  to `True`, then the file will also contain upper and lower
  confidence bounds on the hazard levels (values only, not the
  corresponding distribution parameters).
* ``log``: Log files generated by `tcrm.py`. If executed using
  ``mpirun``, then there will be a separate log file for each process.
* ``tracks``: netcdf-format track files. An outline of the structure
  is given below.
* ``windfield``: netcdf-format wind field files. An outline of the
  structure is given below.
* ``plots``: images generated by :mod:`DataProcess`,
  :mod:`StatInterface` and :mod:`Evaluate` (``plots/stats``) - more information below -
  and :mod:`hazard` (``plots/hazard``). Hazard images include maps of
  return period wind speed for all specified return periods, and
  hazard curves for all locations within the model domain (and where
  valid hazard values are estimated).

.. _trackformat:

Track file format
-----------------

TCRM generates netCDF4 files for saving gridded data and track
files. We make use of the heirarchical group support to store multiple
tracks in a single file, and use compound variables (which map
directly to a :class:`numpy.recarray`) to define a custom data type
for the track data itself. Following is the CDL representation of a
single ``track`` group object in a track netcdf file. Output files
will contain multiple sub-groups (i.e. ``tracks-0000``,
``tracks-0001``, etc.). One file holds all tracks for a single
simulated year.

::

   netcdf tracks.00000 {
   // global attributes:
                :created_on = "2015-07-14 16:09:28" ;
                :created_by = "carthur" ;
   group: tracks {
	group: tracks-0000 {
	    types:
	        compound track_dtype {
		  int CycloneNumber ;
		  float Datetime ;
		  float TimeElapsed ;
		  double Longitude ;
		  double Latitude ;
		  double Speed ;
		  double Bearing ;
		  double CentralPressure ;
		  double EnvPressure ;
		  double rMax ;
	      }; // track_dtype
	    dimensions:
	        time = UNLIMITED ; // (207 currently)
	    variables:
	        float time(time) ;
                    time:units = "hours since 1900-01-01 00:00" ;
		    time:calendar = "standard" ;
                track_dtype track(time) ;
                    track:long_name = "Tropical cyclone track data" ;
		    track:time_units = "hours since 1900-01-01 00:00" ;
		    track:calendar = "standard" ;
		    track:lon_units = "degrees east" ;
		    track:lat_units = "degrees north" ;
		    track:pressure_units = "hPa" ;
		    track:speed_units = "m/s" ;
		    track:length_units = "km" ;
		    track:trackId = "(1, 0)" ;
    } // group tracks-0000


.. _windfieldformat:

Wind field file format
----------------------

TCRM generates netCDF4 files for wind fields from each separate track
event. Because only a single event is stored in each file, there are
no groups defined in these netCDF4 files. Following is a CDL
representation of the wind field file. The global attributes are not
included here for brevity, but capture the complete configuration
settings (as read from the simulation configuration file specified
when the model is executed).

::

    netcdf gust.001-00000 {
    dimensions:
	    lat = 1751 ;
	    lon = 5001 ;
    variables:
	    float lat(lat) ;
		    lat:units = "degrees_north" ;
		    lat:long_name = "Latitude" ;
		    lat:standard_name = "latitude" ;
		    lat:axis = "Y" ;
	    float lon(lon) ;
		    lon:units = "degrees_east" ;
		    lon:long_name = "Longitude" ;
		    lon:standard_name = "longitude" ;
		    lon:axis = "X" ;
	    float vmax(lat, lon) ;
		    vmax:_FillValue = -9999.f ;
		    vmax:grid_mapping = "crs" ;
		    vmax:actual_range = 0.f, 106.6134f ;
		    vmax:valid_range = 0., 200. ;
		    vmax:long_name = "Maximum 3-second gust wind speed" ;
		    vmax:standard_name = "wind_speed_of_gust" ;
		    vmax:cell_methods = "time: maximum time: maximum (interval: 3 seconds)" ;
		    vmax:units = "m/s" ;
	    float ua(lat, lon) ;
		    ua:_FillValue = -9999.f ;
		    ua:grid_mapping = "crs" ;
		    ua:actual_range = -84.30162f, 79.13363f ;
		    ua:valid_range = -200., 200. ;
		    ua:long_name = "Eastward component of maximum wind speed" ;
		    ua:standard_name = "eastward_wind" ;
		    ua:units = "m/s" ;
	    float va(lat, lon) ;
		    va:_FillValue = -9999.f ;
		    va:grid_mapping = "crs" ;
		    va:actual_range = -103.1569f, 85.35658f ;
		    va:valid_range = -200., 200. ;
		    va:long_name = "Northward component of maximim wind speed" ;
		    va:standard_name = "northward_wind" ;
		    va:units = "m/s" ;
	    float slp(lat, lon) ;
		    slp:_FillValue = -9999.f ;
		    slp:grid_mapping = "crs" ;
		    slp:actual_range = 1016.37f, 1016.37f ;
		    slp:valid_range = 70000., 115000. ;
		    slp:long_name = "Minimum air pressure at sea level" ;
		    slp:standard_name = "air_pressure_at_sea_level" ;
		    slp:cell_methods = "time: minimum" ;
		    slp:units = "Pa" ;
	    int crs ;
		    crs:_FillValue = -9999 ;
		    crs:semi_major_axis = 6378137. ;
		    crs:longitude_of_prime_meridian = 0. ;
		    crs:grid_mapping_name = "latitude_longitude" ;
		    crs:inverse_flattening = 298.257222101 ;

    // global attributes:

.. _statplots

Statistical plots
-----------------

If the ``PlotData`` option in the ``Actions`` section of the
configuration file is set to ``True``, then TCRM will run a collection
of plotting routines that generate statistical plots of the input
dataset. If the :mod:`Evaluate` module is executed
(``ExecuteEvaluate=True`` in ``Actions`` section), then a collection
of figures will be created here as well.


Basic data plots:
~~~~~~~~~~~~~~~~~

* ``orginPDF``: Genesis probability based on input data. This is a
  representation of the PDF from which genesis points are randomly
  sampled in the :mod:`TrackGenerator`.
* ``bearing_stats``, ``bearing_rate_stats``, etc.: These four-panel
  plots present the distribution of parameters within each grid cell
  over the model domain (top left), the distribution of anomalies
  within each cell (deviation from the mean in each cell - top right),
  the lagged autocorrelation value of the parameter values (bottom
  left) and the lagged autocorrelation value for the parameter
  anomalies (bottom right). In each, the solid line represents the
  mean across all grid cells, and the shaded band indicates the 90th
  percentile range over all cells. Separate plots are generated for
  the parameter values and the rate of change of those parameters
  (e.g. ``bearing`` and ``bearing_rate``).
* Scatter histograms present parameter values (or their rates of
  change) at one time (vertical axis) against the same parameter at
  the preceding time (horizontal axis). For some parameters, the
  values are highly correlated (e.g. pressure), but the corresponding
  rates, the values show little or no correlation (e.g. pressure rate
  of change).
* ``min_pressure_hist``: the distribution of minimum central
  pressure of all observations, with a kernel density estimate of the
  PDF and a fitted Weibull distribution for comparison.
* ``julian_day``: a histogram of observations and genesis dates by day of year.
* ``frequency``: a histogram of annual event frequency. Start and
  end years are normally much lower values, since the histogram
  doesn't account for the offest season in the Southern Hemisphere.
* ``qqplot`` figures: quantile-quantile plots of parameter values 
  compared to a logistic distribution.

Evaluation plots:
~~~~~~~~~~~~~~~~~

* ``track_density``, ``track_density_percentiles`` and
  ``track_density_samples``: comparison of observed and synthetic
  track density values. The first figure presents the historic track
  density and the mean of the collection of synthetic events
  generated; ``percentiles`` are the 5th and 95th percentile values of
  track density from the synthetic events; ``samples`` is a random
  selection of synthetic event sets, along with the historical track
  density.
* ``genesis_density``, ``genesis_density_percentiles`` and
  ``genesis_density_samples``: as for the track density metric, but
  for genesis points only.
* ``landfall_rates``: comparison of landfall rates for synthetic and
  historic event sets. The landfall gates are specified by the user.
* ``lon_crossing_syn``: comparison of crossing rates (as a
  probability) at lines of longitude for synthetic and historic event
  sets.
* ``meanPressure`` and ``meanPressureDiff``: comparison of historical
  mean central pressure in each grid cell with the mean value from the
  collection of synthetic events generated.
* ``minPressure`` and ``minPressureDiff``: as for the mean pressure
  plots (above), but for the minimum central pressure in each grid
  cell.
* ``minPressureDist``: histogram of minimum central pressure across
  entire model domain, comparing historic values with synthetic
  events.
* ``minPressureQuantiles``: a quantile-quantile plot of observed
  versus synthetic minimum pressure distributions, including estimated
  90th percentile confidence intervals.

